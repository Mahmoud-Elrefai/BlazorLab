@page "/products/get"
@using BlazorLabWASM.Client
@using BlazorLabWASM.Shared
@using BAL.Dtos
@using Telerik.DataSource;


@inject BlazorLabWASM.Client.IServices.IProductServiceApi _ProductService
@inject HttpClient Http
@attribute [Authorize]

@if (IsLoaded)
{
    <TelerikGrid Class="grid"
                 Data=@productsList
                 ConfirmDelete="true"
                 Pageable="true"
                 Groupable="true"
                 Sortable="true"
                 FilterMode="GridFilterMode.FilterMenu"
                 Resizable="true"
                 Reorderable="true"
                 EditMode="GridEditMode.Popup"
                 SelectionMode="GridSelectionMode.Multiple"
                 PageSize="10"
                 Navigable="true">
        <GridColumns>
            <GridCheckboxColumn></GridCheckboxColumn>
            <GridColumn Field="@nameof(ProductDto.Name)" Title="Product Name" Width="195px" />
            <GridColumn Field="@nameof(ProductDto.Price)" Width="120px" Title="Cost" TextAlign="@ColumnTextAlign.Right">
                <Template>
                    @((context as ProductDto).Price.ToString("C2"))
                </Template>
            </GridColumn>

            <GridCommandColumn Width="260px">
                <GridCommandButton Command="Edit" Icon="edit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBar>
            <GridCommandButton Command="Add" Icon="add">Add Product</GridCommandButton>
        </GridToolBar>
    </TelerikGrid>
}
else
{
    <h1>please wait while loading the produts</h1>
}




@code
{
    public bool IsLoaded { get; set; }
    public List<ProductDto> productsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoaded = false;
        productsList = await Http.GetFromJsonAsync<List<ProductDto>>("Product");
        if (productsList.Count != 0)
            IsLoaded = true;
    }


}

